name: "Deployment"

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  pre-setup:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2

      - name: "Set up Python 3.10"
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: "Install pipenv"
        run: pip install pipenv

      - name: "Cache pipenv"
        id: cache-pipenv
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      - if: ${{ steps.cache-pipenv.outputs.cache-hit != 'true' }}
        name: "Install dependencies"
        run: pipenv install --dev

      - name: "Check cache status"
        run: |
          echo "Cache Key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}"
          pipenv run pip list

    outputs:
      cache-path: ${{ steps.cache-pipenv.outputs.cache-hit }}

  linter:
    runs-on: ubuntu-latest
    needs: pre-setup
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2

      - name: "Install pipenv"
        run: pip install pipenv

      - name: "Restore pipenv cache"
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: "Install dependencies"
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --dev

      - name: "Lint code"
        run: make lint

      - name: "Upload lint reports"
        uses: actions/upload-artifact@v3
        with:
          name: lints-reports
          path: reports/lint-reports/**

  test:
    runs-on: ubuntu-latest
    needs: pre-setup
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2

      - name: "Install pipenv"
        run: pip install pipenv

      - name: "Restore pipenv cache"
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: "Install dependencies"
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --dev

      - name: "Run tests"
        run: make test

      - name: "Upload test reports"
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: reports/test-reports/**

  deploy:
    needs: [linter, test]
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2

      - name: "Set up Cloud SDK"
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Build and push Docker image
        env:
          IMAGE: ${{ vars.region }}.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ vars.repository }}/employees-api:${{ github.sha }}
        run: |
          docker build -t $IMAGE .
          docker push $IMAGE

      - name: Deploy to Cloud Run
        env:
          IMAGE: ${{ vars.region }}.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ vars.repository }}/employees-api:${{ github.sha }}
        run: |
          gcloud run deploy employees-api \
            --image $IMAGE \
            --platform managed \
            --region ${{ vars.region }} \
            --allow-unauthenticated \
            --service-account ${{ secrets.SERVICE_ACCOUNT_ID }} \
            --set-env-vars "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }},BQ_DATASET_ID=${{ secrets.BQ_DATASET_ID }},BQ_TABLE_NAME=${{ secrets.BQ_TABLE_NAME }}"
